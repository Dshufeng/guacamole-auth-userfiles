<?php

/**
 * Configuration for sftp support.
 */
trait Guacamole_Config_Protocol_Sftp {
    protected $enable_sftp = null;
    protected $sftp_hostname = null;
    protected $sftp_port = null;
    protected $sftp_username = null;
    protected $sftp_password = null;
    protected $sftp_private_key = null;
    protected $sftp_passphrase = null;
    protected $sftp_directory = null;

    /**
     * @return boolean
     */
    public function getEnableSftp() {
        return $this->enable_sftp;
    }

    /**
     * Whether file transfer should be enabled.
     * If set to "true", the user will be allowed to upload or download files from the specified server using SFTP.
     * Default: false
     *
     * @param boolean $enable_sftp
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setEnableSftp($enable_sftp) {
        $this->enable_sftp = ($enable_sftp == true) ? true: false;

        return $this;
    }

    /**
     * The hostname or IP address of the server hosting SFTP.
     * This parameter is optional.
     * If omitted, the hostname of the VNC server specified with the hostname parameter will be used.
     *
     * @return string
     */
    public function getSftpHostname() {
        return $this->sftp_hostname;
    }

    /**
     * @param string $sftp_hostname
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpHostname($sftp_hostname) {
        $this->sftp_hostname = $sftp_hostname;

        return $this;
    }

    /**
     * The port the SSH server providing SFTP is listening on, usually 22.
     * This parameter is optional.
     * If omitted, the standard port of 22 will be used.
     *
     * @return int
     */
    public function getSftpPort() {
        return $this->sftp_port;
    }

    /**
     * @param int $sftp_port
     * @throws Guacamole_Config_Exception
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpPort($sftp_port) {
        if (!is_numeric($sftp_port) || $sftp_port < 10) {
            throw new Guacamole_Config_Exception('Invalid sftp port');
        }

        $this->sftp_port = $sftp_port;

        return $this;
    }

    /**
     * The username to authenticate as when connecting to the specified SSH server for SFTP.
     * This parameter is required.
     *
     * @return string
     */
    public function getSftpUsername() {
        return $this->sftp_username;
    }

    /**
     * @param string $sftp_username
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpUsername($sftp_username) {
        $this->sftp_username = $sftp_username;

        return $this;
    }

    /**
     * The password to use when authenticating with the specified SSH server for SFTP.
     *
     * @return string
     */
    public function getSftpPassword() {
        return $this->sftp_password;
    }

    /**
     * @param string $sftp_password
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpPassword($sftp_password) {
        $this->sftp_password = $sftp_password;

        return $this;
    }

    /**
     * The entire contents of the private key to use for public key authentication.
     * If this parameter is not specified, public key authentication will not be used.
     * The private key must be in OpenSSH format, as would be generated by the OpenSSH ssh-keygen utility.
     *
     * @return string
     */
    public function getSftpPrivateKey() {
        return $this->sftp_private_key;
    }

    /**
     * @param string $sftp_private_key
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpPrivateKey($sftp_private_key) {
        $this->sftp_private_key = $sftp_private_key;

        return $this;
    }

    /**
     * @return string
     */
    public function getSftpPassphrase() {
        return $this->sftp_passphrase;
    }

    /**
     * The passphrase to use to decrypt the private key for use in public key authentication.
     * This parameter is not needed if the private key does not require a passphrase.
     *
     * @param string $sftp_passphrase
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpPassphrase($sftp_passphrase) {
        $this->sftp_passphrase = $sftp_passphrase;

        return $this;
    }

    /**
     * The directory to upload files to if they are simply dragged and dropped,
     * and thus otherwise lack a specific upload location.
     * This parameter is optional.
     * If omitted, the default upload location of the SSH server providing SFTP will be used.
     *
     * @return string
     */
    public function getSftpDirectory() {
        return $this->sftp_directory;
    }

    /**
     * @param string $sftp_directory
     *
     * @return \Guacamole_Config_Protocol_Sftp
     */
    public function setSftpDirectory($sftp_directory) {
        $this->sftp_directory = $sftp_directory;

        return $this;
    }

}