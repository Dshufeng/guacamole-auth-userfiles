<?php
require_once __DIR__ . '/Abstract.php';

/**
 * Secure Shell
 * Guacamole Version: 0.9.8
 */

class Guacamole_Config_Protocol_Ssh extends Guacamole_Config_Protocol_Abstract {

    protected $password = null;
    protected $private_key = null;
    protected $passphrase = null;

    protected $color_scheme = null;
    protected $font_name = null;
    protected $font_size = null;

    protected $enable_sftp = null;

    const SSH_COLOR_SCHEME_BLACK_WHITE = 'black-white';
    const SSH_COLOR_SCHEME_GREY_BLACK  = 'gray-black';
    const SSH_COLOR_SCHEME_GREEN_BLACK = 'green-black';
    const SSH_COLOR_SCHEME_WHITE_BLACK = 'white-black';

    /**
     * Get protocol name.
     *
     * @return string
     */
    protected function getProtocol() {
        return 'ssh';
    }

    /**
     * @return string
     */
    public function getPassword() {
        return $this->password;
    }

    /**
     * @return string
     */
    public function getPrivateKey() {

        return $this->private_key;
    }

    /**
     * The entire contents of the private key to use for public key authentication.
     * If this parameter is not specified, public key authentication will not be used.
     * The private key must be in OpenSSH format, as would be generated by the OpenSSH ssh-keygen utility.
     *
     * @param string $private_key
     */
    public function setPrivateKey($private_key) {

        $this->private_key = $private_key;
    }

    /**
     * @return string
     */
    public function getPassphrase() {

        return $this->passphrase;
    }

    /**
     * The passphrase to use to decrypt the private key for use in public key authentication.
     * This parameter is not needed if the private key does not require a passphrase.
     * If the private key requires a passphrase, but this parameter is not provided,
     * the user will be prompted for the passphrase upon connecting.
     *
     * @param string $passphrase
     */
    public function setPassphrase($passphrase) {

        $this->passphrase = $passphrase;
    }

    /**
     * @return string
     */
    public function getColorScheme() {

        return $this->color_scheme;
    }

    /**
     * The color scheme to use for the terminal emulator used by SSH connections.
     * Each color scheme dictates the default foreground and background color for the terminal.
     * Programs which specify colors when printing text will override these defaults.
     *
     * This parameter is optional.
     * By default, Guacamole will render text as gray over a black background.
     *
     * Possible values are:
     *   self::SSH_COLOR_SCHEME_BLACK_WHITE
     *       Black text over a white background.
     *
     *   self::SSH_COLOR_SCHEME_GREY_BLACK
     *       Gray text over a black background. This is the default color scheme.
     *
     *   self::SSH_COLOR_SCHEME_GREEN_BLACK
     *       Green text over a black background.
     *
     *   self::SSH_COLOR_SCHEME_WHITE_BLACK
     *       White text over a black background.
     *
     * @param string $color_scheme
     */
    public function setColorScheme($color_scheme) {

        $this->color_scheme = $color_scheme;
    }

    /**
     * @return string
     */
    public function getFontName() {

        return $this->font_name;
    }

    /**
     * The name of the font to use. This parameter is optional.
     * If not specified, the default of "monospace" will be used instead.
     *
     * @param string $font_name
     */
    public function setFontName($font_name) {

        $this->font_name = $font_name;
    }

    /**
     * @return int
     */
    public function getFontSize() {

        return $this->font_size;
    }

    /**
     * The size of the font to use, in points. This parameter is optional. If not specified, the default of 12 will be used instead.
     *
     * @param int $font_size
     * @throws Guacamole_Config_Exception
     */
    public function setFontSize($font_size) {
        if (!is_numeric($font_size) || $font_size < 1) {
            throw new Guacamole_Config_Exception('Invalid font size');
        }

        $this->font_size = $font_size;
    }

    /**
     * @return boolean
     */
    public function getEnableSftp() {
        return $this->enable_sftp;
    }

    /**
     * Whether file transfer should be enabled.
     * If set to "true", the user will be allowed to upload or download files from the SSH server using SFTP.
     * Guacamole includes the guacctl utility which controls file downloads and uploads when run on the SSH server by the user over the SSH connection.
     *
     * @param boolean $enable_sftp
     */
    public function setEnableSftp($enable_sftp) {
        $this->enable_sftp = $enable_sftp;
    }


}